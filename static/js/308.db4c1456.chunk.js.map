{"version":3,"file":"static/js/308.db4c1456.chunk.js","mappings":"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","sources":["webpack://ddd-tpl-react/./src/app/main/components/Main/style.module.scss?afce","components/Input/InputDate.tsx","webpack://ddd-tpl-react/./src/app/main/components/DatePickerBlock/style.module.scss?ca4e","app/main/components/DatePickerBlock/DatePickerBlock.tsx","assets/BigSVG/Razbor_Sovmestimosty.tsx","assets/BigSVG/Polniy_Razbor.tsx","assets/BigSVG/Razbor_Dogovora.tsx","app/main/components/Main/Main.page.tsx","app/main/components/Main/helper.ts","webpack://ddd-tpl-react/./src/components/Button/button.module.scss?3bf9","components/Button/Button.tsx","webpack://ddd-tpl-react/./src/components/Input/input.module.scss?f849"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"style_error__MBNnq\",\"title\":\"style_title__cLnGt\",\"text\":\"style_text__14anX\",\"dataContainer\":\"style_dataContainer__n0k2j\",\"date\":\"style_date__6Oenz\",\"container\":\"style_container__cFCDq\",\"line\":\"style_line__ZM-3c\",\"matchContainer\":\"style_matchContainer__oQB0q\",\"inputContainer\":\"style_inputContainer__+eGYZ\",\"selectedContainer\":\"style_selectedContainer__XoR1H\",\"batePickerWrapper\":\"style_batePickerWrapper__4wITG\",\"button\":\"style_button__czWZF\",\"errorInputWrapper\":\"style_errorInputWrapper__DKK3R\",\"buttonContainer\":\"style_buttonContainer__+jmbL\"};","import React, { ChangeEvent } from 'react'\nimport s from './input.module.scss'\nimport DatePicker from 'react-date-picker';\nimport 'react-date-picker/dist/DatePicker.css';\nimport 'react-calendar/dist/Calendar.css';\nimport clsx from 'clsx';\ntype ValuePiece = Date | null;\nexport type Value = ValuePiece;\ninterface Props {\n    onChange?: (e: any) => void,\n    value: Value,\n    label: string,\n    className?: string\n}\nexport default function InputDate(props: Props) {\n\n    const { onChange, value, label, className } = props\n    return (\n        <div className={clsx(className, s.container)}>\n            <p className={s.label}>{label}</p>\n            <DatePicker\n                dayPlaceholder='DD'\n                monthPlaceholder='MM'\n                yearPlaceholder='YYYY'\n                maxDate={new Date('01.01.2050')}\n                minDate={new Date('01.01.1900')}\n                format=\"d/M/y\"\n                className={s.date}\n                clearIcon={null}\n                calendarIcon={null}\n                shouldOpenCalendar={() => { return false }}\n                onChange={onChange}\n                value={value} />\n        </div>\n\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"style_title__jdvNN\",\"container\":\"style_container__oNOib\",\"children\":\"style_children__GFBlN\"};","import React, { ReactNode, useState } from 'react'\nimport s from './style.module.scss'\nimport InputDate from 'components/Input/InputDate';\nimport { Value } from 'react-date-picker/dist/cjs/shared/types';\ninterface Props {\n    title: string,\n    children: ReactNode\n}\nexport default function DatePickerBlock({ title, children }: Props) {\n    return (\n        <div className={s.container}>\n            <p className={s.title}>{title}</p>\n            <div className={s.children}>\n                {children}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Razbor_Sovmestimosty() {\n    return (\n        <svg width=\"100%\" height=\"auto\" viewBox=\"0 0 1670 313\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M487.442 126.886V2.31349H552.722C568.376 2.31349 579.878 7.2964 587.231 17.2622C593.278 25.3298 594.82 34.0499 591.855 43.4225C588.891 53.151 582.013 60.1508 571.222 64.4219C564.937 66.9133 557.881 68.159 550.054 68.159H517.859V126.886H487.442ZM519.993 7.65233L519.282 8.54213C518.689 9.13533 518.214 9.55057 517.859 9.78785V62.9982H537.603C544.125 62.9982 549.58 61.0999 553.968 57.3034C558.355 53.5069 561.023 48.9393 561.972 43.6004C563.039 38.143 563.039 32.6855 561.972 27.228C561.023 21.7706 558.355 17.1436 553.968 13.3471C549.58 9.55058 544.244 7.65233 537.959 7.65233H519.993Z\" fill=\"black\" />\n            <path d=\"M594.115 126.886H588.245L625.599 29.3636L619.551 15.3046L641.786 0H645.699L701.553 126.886H667.934L656.728 100.548H603.898L594.115 126.886ZM628.445 36.482L605.677 95.387H654.415L628.445 36.482Z\" fill=\"black\" />\n            <path d=\"M753.45 129.2C743.607 129.2 734.417 126.767 725.879 121.903C717.341 116.92 710.344 110.098 704.889 101.438L709.336 98.7683C714.198 106.599 720.543 112.827 728.369 117.454C736.314 122.081 744.319 124.395 752.383 124.395C763.885 124.395 772.008 119.649 776.752 110.158C781.021 101.734 781.495 92.8363 778.175 83.4637C774.854 73.8538 768.688 67.5658 759.675 64.5998C756.474 63.532 753.035 62.9982 749.359 62.9982V57.8373C760.98 57.8373 769.162 53.0917 773.906 43.6004C777.819 35.7701 778.234 27.7026 775.151 19.3977C772.186 11.4488 767.146 6.76252 760.031 5.33883C758.727 5.10155 757.422 4.9829 756.118 4.9829C748.173 4.9829 740.228 7.2964 732.282 11.9234C724.456 16.5504 718.112 22.779 713.25 30.6093L708.803 27.7619C714.258 19.1011 721.254 12.3386 729.792 7.47437C738.33 2.6101 747.461 0.177969 757.185 0.177969C775.803 0.177969 789.381 5.10155 797.919 14.9487C804.323 22.5417 806.101 30.7279 803.255 39.5073C800.291 48.4054 793.413 54.9306 782.622 59.083C781.673 59.4389 780.665 59.7949 779.598 60.1508C793.472 63.8286 802.603 70.6505 806.991 80.6163C811.023 89.8703 810.015 99.0056 803.967 108.022C796.733 118.7 784.756 125.403 768.036 128.132C763.292 128.844 758.43 129.2 753.45 129.2Z\" fill=\"black\" />\n            <path d=\"M831.384 2.31349H916.231V7.47437H864.113L861.801 9.78785V58.5491H893.996C910.835 58.5491 923.168 63.8286 930.995 74.3877C937.043 82.8111 938.703 91.9465 935.975 101.794C933.129 111.759 926.548 118.878 916.231 123.149C910.539 125.64 904.076 126.886 896.842 126.886H831.384V2.31349ZM881.723 62.8202H861.801V119.234L864.113 121.547H882.079C886.585 121.547 890.617 120.48 894.174 118.344C897.85 116.208 900.578 113.42 902.357 109.98C904.254 106.421 905.618 102.565 906.448 98.4124C907.396 94.26 907.396 90.1075 906.448 85.9551C905.618 81.8027 904.254 78.0062 902.357 74.5656C900.578 71.0064 897.85 68.159 894.174 66.0235C890.498 63.888 886.348 62.8202 881.723 62.8202Z\" fill=\"black\" />\n            <path d=\"M950.513 64.5998C950.513 52.2612 953.833 41.109 960.474 31.1432C967.233 21.1773 976.068 13.525 986.977 8.1862C998.006 2.72873 1009.86 0 1022.55 0C1035.36 0 1047.22 2.72873 1058.13 8.1862C1069.16 13.6437 1077.99 21.3553 1084.63 31.3211C1091.27 41.2869 1094.59 52.4391 1094.59 64.7778C1094.59 83.2857 1087.48 98.6497 1073.25 110.87C1059.14 123.09 1042.24 129.2 1022.55 129.2C1002.87 129.2 985.91 123.09 971.68 110.87C957.568 98.531 950.513 83.1077 950.513 64.5998ZM1022.55 5.33883C1010.58 5.33883 1000.79 10.1438 993.203 19.7537C985.732 29.2449 981.997 44.1936 981.997 64.5998C981.997 84.6501 985.732 99.5988 993.203 109.446C1000.67 119.174 1010.46 124.039 1022.55 124.039C1034.53 124.039 1044.25 119.293 1051.72 109.802C1059.31 100.192 1063.11 85.184 1063.11 64.7778C1063.11 44.6089 1059.37 29.6602 1051.9 19.9316C1044.43 10.2031 1034.65 5.33883 1022.55 5.33883Z\" fill=\"black\" />\n            <path d=\"M1107.93 126.886V2.31349H1173.21C1188.86 2.31349 1200.36 7.2964 1207.72 17.2622C1213.76 25.3298 1215.31 34.0499 1212.34 43.4225C1209.38 53.151 1202.5 60.1508 1191.71 64.4219C1185.42 66.9133 1178.37 68.159 1170.54 68.159H1138.34V126.886H1107.93ZM1140.48 7.65233L1139.77 8.54213C1139.17 9.13533 1138.7 9.55057 1138.34 9.78785V62.9982H1158.09C1164.61 62.9982 1170.07 61.0999 1174.45 57.3034C1178.84 53.5069 1181.51 48.9393 1182.46 43.6004C1183.52 38.143 1183.52 32.6855 1182.46 27.228C1181.51 21.7706 1178.84 17.1436 1174.45 13.3471C1170.07 9.55058 1164.73 7.65233 1158.44 7.65233H1140.48Z\" fill=\"black\" />\n            <path d=\"M0 247.913C0 229.761 6.9965 214.456 20.9895 201.999C34.9825 189.542 52.0587 183.313 72.2181 183.313C81.942 183.55 91.0138 186.101 99.4333 190.966C107.971 195.83 114.909 202.592 120.245 211.253L115.798 214.1C111.055 206.626 104.71 200.516 96.7651 195.77C88.82 190.906 80.6376 188.474 72.2181 188.474C60.3596 188.474 50.6357 193.338 43.0463 203.067C35.4568 212.795 31.6621 227.744 31.6621 247.913C31.6621 267.726 35.5161 282.675 43.2241 292.759C50.9321 302.725 60.7747 307.708 72.7517 307.708C81.1712 307.708 89.3536 305.335 97.2988 300.589C105.244 295.725 111.588 289.556 116.332 282.081L120.779 284.751C115.324 293.412 108.327 300.233 99.789 305.216C91.2509 310.081 82.0606 312.513 72.2181 312.513C52.533 312.513 35.5754 306.403 21.3453 294.183C7.11508 281.844 0 266.421 0 247.913Z\" fill=\"black\" />\n            <path d=\"M129.586 247.913C129.586 235.574 132.907 224.422 139.547 214.456C146.307 204.491 155.141 196.838 166.051 191.499C177.079 186.042 188.938 183.313 201.626 183.313C214.434 183.313 226.292 186.042 237.202 191.499C248.23 196.957 257.065 204.668 263.706 214.634C270.346 224.6 273.667 235.752 273.667 248.091C273.667 266.599 266.552 281.963 252.321 294.183C238.21 306.403 221.312 312.513 201.626 312.513C181.941 312.513 164.984 306.403 150.754 294.183C136.642 281.844 129.586 266.421 129.586 247.913ZM201.626 188.652C189.649 188.652 179.866 193.457 172.277 203.067C164.806 212.558 161.07 227.507 161.07 247.913C161.07 267.963 164.806 282.912 172.277 292.759C179.748 302.488 189.531 307.352 201.626 307.352C213.604 307.352 223.327 302.606 230.798 293.115C238.388 283.505 242.182 268.497 242.182 248.091C242.182 227.922 238.447 212.973 230.976 203.245C223.505 193.516 213.722 188.652 201.626 188.652Z\" fill=\"black\" />\n            <path d=\"M287 185.627H347.301C355.958 185.627 363.369 187.288 369.535 190.61C375.82 193.813 380.089 197.906 382.343 202.889C384.714 207.753 385.722 212.855 385.367 218.194C385.011 223.414 382.639 228.337 378.251 232.964C373.982 237.591 368.29 240.973 361.175 243.108C367.46 244.294 372.915 246.43 377.54 249.515C382.283 252.481 385.782 255.981 388.035 260.014C390.288 264.048 391.77 268.379 392.482 273.005C393.193 277.632 392.719 282.141 391.059 286.531C389.398 290.802 386.967 294.717 383.766 298.276C380.682 301.835 376.354 304.742 370.781 306.996C365.326 309.132 359.159 310.199 352.281 310.199H287V185.627ZM317.417 302.725L319.73 305.038H337.518C342.024 305.038 346.056 303.971 349.613 301.835C353.289 299.581 356.076 296.734 357.973 293.293C359.871 289.852 361.235 286.056 362.065 281.904C363.013 277.751 363.013 273.599 362.065 269.446C361.235 265.175 359.871 261.319 357.973 257.879C356.076 254.438 353.289 251.65 349.613 249.515C346.056 247.26 341.905 246.133 337.162 246.133H317.417V302.725ZM317.417 192.923V240.973H331.47C337.636 240.973 342.854 239.252 347.123 235.812C351.392 232.371 354.001 228.219 354.95 223.354C356.017 218.371 356.017 213.448 354.95 208.584C354.001 203.601 351.392 199.389 347.123 195.948C342.854 192.508 337.636 190.788 331.47 190.788H319.73L317.417 192.923Z\" fill=\"black\" />\n            <path d=\"M411.045 310.199H405.886L417.093 185.627H446.976L482.729 270.87L517.237 185.627H546.231L557.082 310.199H526.487L516.882 200.219L472.057 312.513H467.61L420.828 201.109L411.045 310.199Z\" fill=\"black\" />\n            <path d=\"M579.351 310.199V185.627H654.415V190.966H612.081C611.132 191.915 610.361 192.626 609.768 193.101V240.973H633.604V246.311H609.768V302.725L612.081 305.038H659.93V310.199H579.351Z\" fill=\"black\" />\n            <path d=\"M667.039 247.913C667.039 229.761 674.036 214.456 688.029 201.999C702.022 189.542 719.098 183.313 739.257 183.313C748.981 183.55 758.053 186.101 766.472 190.966C775.01 195.83 781.948 202.592 787.284 211.253L782.837 214.1C778.094 206.626 771.749 200.516 763.804 195.77C755.859 190.906 747.677 188.474 739.257 188.474C727.399 188.474 717.675 193.338 710.085 203.067C702.496 212.795 698.701 227.744 698.701 247.913C698.701 267.726 702.555 282.675 710.263 292.759C717.971 302.725 727.814 307.708 739.791 307.708C748.21 307.708 756.393 305.335 764.338 300.589C772.283 295.725 778.627 289.556 783.371 282.081L787.818 284.751C782.363 293.412 775.366 300.233 766.828 305.216C758.29 310.081 749.1 312.513 739.257 312.513C719.572 312.513 702.615 306.403 688.384 294.183C674.154 281.844 667.039 266.421 667.039 247.913Z\" fill=\"black\" />\n            <path d=\"M818.717 190.966H787.766V185.627H884.531V190.966H853.581C853.462 191.084 853.166 191.44 852.691 192.033C852.217 192.508 851.802 192.864 851.446 193.101V310.199H820.851V193.101C820.495 192.864 820.081 192.508 819.606 192.033C819.132 191.44 818.835 191.084 818.717 190.966Z\" fill=\"black\" />\n            <path d=\"M893.415 185.627H923.832V296.496L972.393 185.627H1002.81V310.199H972.393V199.152L923.832 310.199H893.415V185.627Z\" fill=\"black\" />\n            <path d=\"M1030.14 310.199H1024.98L1036.19 185.627H1066.07L1101.82 270.87L1136.33 185.627H1165.33L1176.18 310.199H1145.58L1135.98 200.219L1091.15 312.513H1086.71L1039.92 201.109L1030.14 310.199Z\" fill=\"black\" />\n            <path d=\"M1180.69 247.913C1180.69 235.574 1184.01 224.422 1190.66 214.456C1197.41 204.491 1206.25 196.838 1217.16 191.499C1228.19 186.042 1240.05 183.313 1252.73 183.313C1265.54 183.313 1277.4 186.042 1288.31 191.499C1299.34 196.957 1308.17 204.668 1314.81 214.634C1321.45 224.6 1324.77 235.752 1324.77 248.091C1324.77 266.599 1317.66 281.963 1303.43 294.183C1289.32 306.403 1272.42 312.513 1252.73 312.513C1233.05 312.513 1216.09 306.403 1201.86 294.183C1187.75 281.844 1180.69 266.421 1180.69 247.913ZM1252.73 188.652C1240.76 188.652 1230.97 193.457 1223.38 203.067C1215.91 212.558 1212.18 227.507 1212.18 247.913C1212.18 267.963 1215.91 282.912 1223.38 292.759C1230.86 302.488 1240.64 307.352 1252.73 307.352C1264.71 307.352 1274.44 302.606 1281.91 293.115C1289.5 283.505 1293.29 268.497 1293.29 248.091C1293.29 227.922 1289.55 212.973 1282.08 203.245C1274.61 193.516 1264.83 188.652 1252.73 188.652Z\" fill=\"black\" />\n            <path d=\"M1333.73 247.913C1333.73 229.761 1340.73 214.456 1354.72 201.999C1368.71 189.542 1385.79 183.313 1405.95 183.313C1415.67 183.55 1424.74 186.101 1433.16 190.966C1441.7 195.83 1448.64 202.592 1453.98 211.253L1449.53 214.1C1444.79 206.626 1438.44 200.516 1430.5 195.77C1422.55 190.906 1414.37 188.474 1405.95 188.474C1394.09 188.474 1384.37 193.338 1376.78 203.067C1369.19 212.795 1365.39 227.744 1365.39 247.913C1365.39 267.726 1369.25 282.675 1376.95 292.759C1384.66 302.725 1394.51 307.708 1406.48 307.708C1414.9 307.708 1423.08 305.335 1431.03 300.589C1438.97 295.725 1445.32 289.556 1450.06 282.081L1454.51 284.751C1449.05 293.412 1442.06 300.233 1433.52 305.216C1424.98 310.081 1415.79 312.513 1405.95 312.513C1386.26 312.513 1369.31 306.403 1355.08 294.183C1340.85 281.844 1333.73 266.421 1333.73 247.913Z\" fill=\"black\" />\n            <path d=\"M1485.41 190.966H1454.46V185.627H1551.22V190.966H1520.27C1520.15 191.084 1519.86 191.44 1519.38 192.033C1518.91 192.508 1518.49 192.864 1518.14 193.101V310.199H1487.54V193.101C1487.19 192.864 1486.77 192.508 1486.3 192.033C1485.82 191.44 1485.53 191.084 1485.41 190.966Z\" fill=\"black\" />\n            <path d=\"M1560.11 185.627H1590.52V296.496L1639.08 185.627H1669.5V310.199H1639.08V199.152L1590.52 310.199H1560.11V185.627Z\" fill=\"black\" />\n        </svg>\n\n    )\n}\n","import React from 'react'\n\nexport default function Polniy_Razbor() {\n  return (\n    <svg width=\"100%\" height=\"auto\" viewBox=\"0 0 1680 161\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.704102 31.4771H112.072V157.916H80.9761V39.0634L78.6258 36.7153H33.7892C33.3071 37.3174 32.5839 38.1001 31.6197 39.0634V157.916H0.704102V31.4771Z\" fill=\"black\"/>\n<path d=\"M130.084 94.6966C130.084 82.1731 133.459 70.8538 140.208 60.7387C147.078 50.6236 156.058 42.8566 167.146 37.4378C178.356 31.8986 190.408 29.1289 203.305 29.1289C216.322 29.1289 228.375 31.8986 239.464 37.4378C250.673 42.977 259.652 50.8042 266.402 60.9193C273.151 71.0345 276.526 82.3538 276.526 94.8773C276.526 113.662 269.294 129.257 254.831 141.66C240.488 154.063 223.313 160.264 203.305 160.264C183.297 160.264 166.062 154.063 151.598 141.66C137.255 129.136 130.084 113.482 130.084 94.6966ZM203.305 34.5478C191.132 34.5478 181.188 39.4247 173.474 49.1786C165.881 58.812 162.084 73.9847 162.084 94.6966C162.084 115.047 165.881 130.22 173.474 140.215C181.068 150.089 191.011 155.026 203.305 155.026C215.478 155.026 225.362 150.209 232.955 140.576C240.669 130.822 244.526 115.589 244.526 94.8773C244.526 74.4062 240.729 59.2335 233.136 49.3592C225.543 39.4849 215.599 34.5478 203.305 34.5478Z\" fill=\"black\"/>\n<path d=\"M314.591 93.071C310.735 137.626 300.972 159.903 285.303 159.903C282.29 159.903 279.397 159.241 276.625 157.916V152.678C295.066 152.678 305.913 132.749 309.168 92.8904L314.23 31.4771H394.683V157.916H363.586V39.0634L361.417 36.8959H321.462L319.292 39.0634L314.591 93.071Z\" fill=\"black\"/>\n<path d=\"M421.789 157.916V31.4771H452.885V87.6522H502.242V31.4771H533.157V157.916H502.242V93.071H452.885V157.916H421.789Z\" fill=\"black\"/>\n<path d=\"M560.208 157.916V31.4771H591.124V88.5553H623.847C640.963 88.5553 653.497 93.9139 661.452 104.631C667.599 113.181 669.287 122.453 666.515 132.448C663.622 142.563 656.932 149.788 646.447 154.123C640.661 156.652 634.092 157.916 626.74 157.916H560.208ZM712.617 157.916H681.52V31.4771H712.617V157.916ZM611.373 92.8904H591.124V150.149L593.474 152.497H611.734C616.314 152.497 620.412 151.414 624.028 149.246C627.765 147.079 630.537 144.249 632.345 140.757C634.273 137.144 635.659 133.23 636.503 129.016C637.467 124.801 637.467 120.587 636.503 116.372C635.659 112.157 634.273 108.304 632.345 104.812C630.537 101.199 627.765 98.3092 624.028 96.1416C620.292 93.9741 616.073 92.8904 611.373 92.8904Z\" fill=\"black\"/>\n<path d=\"M770.681 157.916H739.765V31.4771H770.681V144.008L820.037 31.4771H850.953V157.916H820.037V45.2048L770.681 157.916ZM761.641 4.74427L764.896 0.589844C774.899 4.68407 785.024 6.73118 795.269 6.73118C805.514 6.73118 815.578 4.68407 825.461 0.589844L828.896 5.28616C817.446 14.5584 806.297 19.1945 795.449 19.1945C784.361 19.1945 773.091 14.3777 761.641 4.74427Z\" fill=\"black\"/>\n<path d=\"M941.215 157.916V31.4771H1007.57C1023.48 31.4771 1035.17 36.5347 1042.64 46.6498C1048.79 54.8382 1050.35 63.689 1047.34 73.202C1044.33 83.0763 1037.34 90.1809 1026.37 94.516C1019.98 97.0448 1012.81 98.3092 1004.85 98.3092H972.131V157.916H941.215ZM974.3 36.8959L973.577 37.7991C972.974 38.4011 972.492 38.8226 972.131 39.0634V93.071H992.199C998.828 93.071 1004.37 91.1443 1008.83 87.2909C1013.29 83.4375 1016 78.8014 1016.97 73.3826C1018.05 67.8434 1018.05 62.3042 1016.97 56.7649C1016 51.2257 1013.29 46.5294 1008.83 42.676C1004.37 38.8226 998.948 36.8959 992.56 36.8959H974.3Z\" fill=\"black\"/>\n<path d=\"M1049.64 157.916H1043.67L1081.64 58.9324L1075.49 44.6629L1098.09 29.1289H1102.07L1158.84 157.916H1124.67L1113.28 131.183H1059.58L1049.64 157.916ZM1084.53 66.1575L1061.39 125.945H1110.93L1084.53 66.1575Z\" fill=\"black\"/>\n<path d=\"M1211.58 160.264C1201.58 160.264 1192.24 157.796 1183.56 152.859C1174.88 147.801 1167.77 140.877 1162.23 132.086L1166.75 129.377C1171.69 137.325 1178.14 143.647 1186.09 148.343C1194.17 153.039 1202.3 155.387 1210.5 155.387C1222.19 155.387 1230.45 150.571 1235.27 140.937C1239.61 132.388 1240.09 123.356 1236.71 113.843C1233.34 104.089 1227.07 97.7071 1217.91 94.6966C1214.66 93.6129 1211.16 93.071 1207.43 93.071V87.8328C1219.24 87.8328 1227.55 83.0161 1232.37 73.3826C1236.35 65.435 1236.77 57.2466 1233.64 48.8173C1230.63 40.7493 1225.5 35.9928 1218.27 34.5478C1216.95 34.3069 1215.62 34.1865 1214.3 34.1865C1206.22 34.1865 1198.14 36.5347 1190.07 41.231C1182.11 45.9273 1175.67 52.2492 1170.72 60.1968L1166.2 57.3068C1171.75 48.5163 1178.86 41.6524 1187.54 36.7153C1196.22 31.7782 1205.5 29.3096 1215.38 29.3096C1234.3 29.3096 1248.1 34.3069 1256.78 44.3016C1263.29 52.0084 1265.1 60.3173 1262.21 69.2282C1259.19 78.2596 1252.2 84.8826 1241.23 89.0972C1240.27 89.4585 1239.24 89.8197 1238.16 90.181C1252.26 93.9139 1261.54 100.838 1266 110.953C1270.1 120.346 1269.08 129.618 1262.93 138.77C1255.58 149.607 1243.4 156.411 1226.41 159.181C1221.59 159.903 1216.65 160.264 1211.58 160.264Z\" fill=\"black\"/>\n<path d=\"M1290.79 31.4771H1377.03V36.7153H1324.06L1321.71 39.0634V88.5553H1354.43C1371.55 88.5553 1384.08 93.9139 1392.04 104.631C1398.19 113.181 1399.87 122.453 1397.1 132.448C1394.21 142.563 1387.52 149.788 1377.03 154.123C1371.25 156.652 1364.68 157.916 1357.33 157.916H1290.79V31.4771ZM1341.96 92.8904H1321.71V150.149L1324.06 152.497H1342.32C1346.9 152.497 1351 151.414 1354.61 149.246C1358.35 147.079 1361.12 144.249 1362.93 140.757C1364.86 137.144 1366.25 133.23 1367.09 129.016C1368.05 124.801 1368.05 120.587 1367.09 116.372C1366.25 112.157 1364.86 108.304 1362.93 104.812C1361.12 101.199 1358.35 98.3092 1354.61 96.1416C1350.88 93.9741 1346.66 92.8904 1341.96 92.8904Z\" fill=\"black\"/>\n<path d=\"M1411.88 94.6966C1411.88 82.1731 1415.25 70.8538 1422 60.7387C1428.87 50.6236 1437.85 42.8566 1448.94 37.4378C1460.15 31.8986 1472.2 29.1289 1485.1 29.1289C1498.11 29.1289 1510.17 31.8986 1521.26 37.4378C1532.47 42.977 1541.44 50.8042 1548.19 60.9193C1554.94 71.0345 1558.32 82.3538 1558.32 94.8773C1558.32 113.662 1551.09 129.257 1536.62 141.66C1522.28 154.063 1505.11 160.264 1485.1 160.264C1465.09 160.264 1447.85 154.063 1433.39 141.66C1419.05 129.136 1411.88 113.482 1411.88 94.6966ZM1485.1 34.5478C1472.92 34.5478 1462.98 39.4247 1455.27 49.1786C1447.67 58.812 1443.88 73.9847 1443.88 94.6966C1443.88 115.047 1447.67 130.22 1455.27 140.215C1462.86 150.089 1472.8 155.026 1485.1 155.026C1497.27 155.026 1507.15 150.209 1514.75 140.576C1522.46 130.822 1526.32 115.589 1526.32 94.8773C1526.32 74.4062 1522.52 59.2335 1514.93 49.3592C1507.34 39.4849 1497.39 34.5478 1485.1 34.5478Z\" fill=\"black\"/>\n<path d=\"M1571.87 157.916V31.4771H1638.22C1654.13 31.4771 1665.82 36.5347 1673.3 46.6498C1679.44 54.8382 1681.01 63.689 1678 73.202C1674.98 83.0763 1667.99 90.1809 1657.02 94.516C1650.64 97.0448 1643.47 98.3092 1635.51 98.3092H1602.79V157.916H1571.87ZM1604.96 36.8959L1604.23 37.7991C1603.63 38.4011 1603.15 38.8226 1602.79 39.0634V93.071H1622.85C1629.48 93.071 1635.03 91.1443 1639.49 87.2909C1643.95 83.4375 1646.66 78.8014 1647.62 73.3826C1648.71 67.8434 1648.71 62.3042 1647.62 56.7649C1646.66 51.2257 1643.95 46.5294 1639.49 42.676C1635.03 38.8226 1629.6 36.8959 1623.22 36.8959H1604.96Z\" fill=\"black\"/>\n</svg>\n\n  )\n}\n","import React from 'react'\n\nexport default function Razbor_Dogovora() {\n  return (\n    <svg width=\"100%\" height=\"auto\" viewBox=\"0 0 3441 292\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 239.306V4.36322H123.092C152.607 4.36322 174.297 13.7609 188.16 32.5563C199.563 47.7716 202.47 64.2176 196.88 81.8943C191.29 100.242 178.321 113.444 157.974 121.499C146.123 126.198 132.819 128.547 118.061 128.547H57.3535V239.306H0ZM61.3784 14.4322L60.0367 16.1104C58.9187 17.2291 58.0243 18.0123 57.3535 18.4598V118.814H94.583C106.881 118.814 117.167 115.234 125.44 108.074C133.713 100.913 138.744 92.2989 140.533 82.2299C142.545 71.9372 142.545 61.6445 140.533 51.3517C138.744 41.059 133.713 32.3326 125.44 25.1724C117.167 18.0123 107.105 14.4322 95.2538 14.4322H61.3784Z\" fill=\"black\"/>\n<path d=\"M201.141 239.306H190.073L260.507 55.3793L249.103 28.8644L291.028 0H298.407L403.723 239.306H340.332L319.202 189.632H219.588L201.141 239.306ZM265.873 68.8046L222.942 179.899H314.842L265.873 68.8046Z\" fill=\"black\"/>\n<path d=\"M501.579 243.669C483.02 243.669 465.691 239.082 449.592 229.908C433.492 220.51 420.3 207.644 410.014 191.31L418.399 186.276C427.567 201.044 439.53 212.791 454.287 221.517C469.269 230.244 484.362 234.607 499.566 234.607C521.256 234.607 536.572 225.657 545.516 207.756C553.566 191.87 554.46 175.088 548.2 157.411C541.939 139.287 530.311 127.428 513.318 121.834C507.281 119.821 500.796 118.814 493.865 118.814V109.08C515.777 109.08 531.206 100.13 540.15 82.2299C547.529 67.4621 548.311 52.2467 542.498 36.5839C536.908 21.5924 527.405 12.754 513.989 10.069C511.529 9.62146 509.069 9.3977 506.61 9.3977C491.629 9.3977 476.647 13.7609 461.666 22.4874C446.908 31.2138 434.946 42.9609 425.778 57.7287L417.393 52.3586C427.679 36.0245 440.871 23.2705 456.97 14.0966C473.07 4.92262 490.287 0.335648 508.622 0.335648C543.727 0.335648 569.33 9.62147 585.429 28.1931C597.503 42.5134 600.857 57.9525 595.491 74.5104C589.901 91.292 576.932 103.598 556.585 111.43C554.796 112.101 552.895 112.772 550.883 113.444C577.044 120.38 594.261 133.246 602.534 152.041C610.137 169.494 608.236 186.723 596.833 203.729C583.193 223.867 560.609 236.509 529.082 241.655C520.138 242.998 510.97 243.669 501.579 243.669Z\" fill=\"black\"/>\n<path d=\"M648.529 4.36322H808.515V14.0966H710.243L705.882 18.4598V110.423H766.59C798.341 110.423 821.596 120.38 836.353 140.294C847.757 156.181 850.887 173.41 845.745 191.982C840.378 210.777 827.968 224.202 808.515 232.257C797.782 236.956 785.596 239.306 771.956 239.306H648.529V4.36322ZM743.447 118.478H705.882V224.874L710.243 229.237H744.118C752.615 229.237 760.217 227.223 766.925 223.195C773.857 219.168 779 213.91 782.354 207.421C785.931 200.708 788.503 193.436 790.068 185.605C791.857 177.773 791.857 169.942 790.068 162.11C788.503 154.279 785.931 147.119 782.354 140.63C779 133.917 773.857 128.547 766.925 124.52C759.994 120.492 752.168 118.478 743.447 118.478Z\" fill=\"black\"/>\n<path d=\"M873.156 121.834C873.156 98.564 879.417 77.531 891.938 58.7356C904.683 39.9402 921.342 25.508 941.913 15.4391C962.708 5.14636 985.068 0 1008.99 0C1033.14 0 1055.5 5.14636 1076.07 15.4391C1096.87 25.7318 1113.53 40.2759 1126.05 59.0713C1138.57 77.8667 1144.83 98.8996 1144.83 122.17C1144.83 157.076 1131.41 186.052 1104.58 209.099C1077.97 232.146 1046.11 243.669 1008.99 243.669C971.875 243.669 939.9 232.146 913.068 209.099C886.46 185.828 873.156 156.74 873.156 121.834ZM1008.99 10.069C986.409 10.069 967.962 19.131 953.652 37.2552C939.565 55.1556 932.522 83.3487 932.522 121.834C932.522 159.649 939.565 187.842 953.652 206.414C967.739 224.762 986.186 233.936 1008.99 233.936C1031.58 233.936 1049.91 224.985 1064 207.085C1078.31 188.961 1085.46 160.656 1085.46 122.17C1085.46 84.1318 1078.42 55.9387 1064.33 37.5908C1050.25 19.2429 1031.8 10.069 1008.99 10.069Z\" fill=\"black\"/>\n<path d=\"M1169.97 239.306V4.36322H1293.06C1322.58 4.36322 1344.27 13.7609 1358.13 32.5563C1369.54 47.7716 1372.44 64.2176 1366.85 81.8943C1361.26 100.242 1348.29 113.444 1327.95 121.499C1316.1 126.198 1302.79 128.547 1288.03 128.547H1227.33V239.306H1169.97ZM1231.35 14.4322L1230.01 16.1104C1228.89 17.2291 1228 18.0123 1227.33 18.4598V118.814H1264.56C1276.85 118.814 1287.14 115.234 1295.41 108.074C1303.69 100.913 1308.72 92.2989 1310.51 82.2299C1312.52 71.9372 1312.52 61.6445 1310.51 51.3517C1308.72 41.059 1303.69 32.3326 1295.41 25.1724C1287.14 18.0123 1277.08 14.4322 1265.23 14.4322H1231.35Z\" fill=\"black\"/>\n<path d=\"M1513.73 292H1503.67V229.237C1537.21 229.237 1557.33 192.205 1564.04 118.143L1574.1 4.36322H1721.34V225.209L1725.37 229.237H1742.48V292H1732.41V253.402L1721.68 239.306H1524.13L1513.73 253.402V292ZM1574.1 118.478C1569.18 173.522 1556.89 210.441 1537.21 229.237H1659.3L1663.66 225.209V18.4598L1659.3 14.0966H1586.85L1582.82 18.4598L1574.1 118.478Z\" fill=\"black\"/>\n<path d=\"M1759.15 121.834C1759.15 98.564 1765.41 77.531 1777.93 58.7356C1790.68 39.9402 1807.34 25.508 1827.91 15.4391C1848.7 5.14636 1871.06 0 1894.99 0C1919.14 0 1941.5 5.14636 1962.07 15.4391C1982.86 25.7318 1999.52 40.2759 2012.04 59.0713C2024.56 77.8667 2030.83 98.8996 2030.83 122.17C2030.83 157.076 2017.41 186.052 1990.58 209.099C1963.97 232.146 1932.11 243.669 1894.99 243.669C1857.87 243.669 1825.9 232.146 1799.06 209.099C1772.46 185.828 1759.15 156.74 1759.15 121.834ZM1894.99 10.069C1872.4 10.069 1853.96 19.131 1839.65 37.2552C1825.56 55.1556 1818.52 83.3487 1818.52 121.834C1818.52 159.649 1825.56 187.842 1839.65 206.414C1853.73 224.762 1872.18 233.936 1894.99 233.936C1917.57 233.936 1935.91 224.985 1949.99 207.085C1964.3 188.961 1971.46 160.656 1971.46 122.17C1971.46 84.1318 1964.42 55.9387 1950.33 37.5908C1936.24 19.2429 1917.8 10.069 1894.99 10.069Z\" fill=\"black\"/>\n<path d=\"M2113.32 239.306H2055.97V4.36322H2197.17V14.0966H2117.68L2113.32 18.4598V239.306Z\" fill=\"black\"/>\n<path d=\"M2219.34 121.834C2219.34 98.564 2225.61 77.531 2238.13 58.7356C2250.87 39.9402 2267.53 25.508 2288.1 15.4391C2308.9 5.14636 2331.26 0 2355.18 0C2379.33 0 2401.69 5.14636 2422.26 15.4391C2443.06 25.7318 2459.72 40.2759 2472.24 59.0713C2484.76 77.8667 2491.02 98.8996 2491.02 122.17C2491.02 157.076 2477.6 186.052 2450.77 209.099C2424.16 232.146 2392.3 243.669 2355.18 243.669C2318.06 243.669 2286.09 232.146 2259.26 209.099C2232.65 185.828 2219.34 156.74 2219.34 121.834ZM2355.18 10.069C2332.6 10.069 2314.15 19.131 2299.84 37.2552C2285.75 55.1556 2278.71 83.3487 2278.71 121.834C2278.71 159.649 2285.75 187.842 2299.84 206.414C2313.93 224.762 2332.37 233.936 2355.18 233.936C2377.77 233.936 2396.1 224.985 2410.19 207.085C2424.5 188.961 2431.65 160.656 2431.65 122.17C2431.65 84.1318 2424.61 55.9387 2410.52 37.5908C2396.44 19.2429 2377.99 10.069 2355.18 10.069Z\" fill=\"black\"/>\n<path d=\"M2516.16 4.36322H2629.86C2646.18 4.36322 2660.16 7.49579 2671.79 13.7609C2683.64 19.8023 2691.69 27.5218 2695.94 36.9195C2700.41 46.0935 2702.31 55.7149 2701.64 65.7839C2700.97 75.6291 2696.49 84.9149 2688.22 93.6414C2680.17 102.368 2669.44 108.745 2656.02 112.772C2667.87 115.01 2678.16 119.038 2686.88 124.855C2695.82 130.449 2702.42 137.05 2706.67 144.657C2710.92 152.265 2713.71 160.432 2715.05 169.159C2716.4 177.885 2715.5 186.388 2712.37 194.667C2709.24 202.722 2704.66 210.106 2698.62 216.818C2692.81 223.531 2684.64 229.013 2674.13 233.264C2663.85 237.292 2652.22 239.306 2639.25 239.306H2516.16V4.36322ZM2573.51 225.209L2577.87 229.572H2611.41C2619.91 229.572 2627.51 227.559 2634.22 223.531C2641.15 219.28 2646.41 213.91 2649.99 207.421C2653.56 200.932 2656.14 193.772 2657.7 185.94C2659.49 178.109 2659.49 170.277 2657.7 162.446C2656.14 154.391 2653.56 147.119 2649.99 140.63C2646.41 134.141 2641.15 128.883 2634.22 124.855C2627.51 120.604 2619.69 118.478 2610.74 118.478H2573.51V225.209ZM2573.51 18.1241V108.745H2600.01C2611.64 108.745 2621.48 105.5 2629.53 99.0115C2637.58 92.5226 2642.5 84.6912 2644.28 75.5172C2646.3 66.1195 2646.3 56.8337 2644.28 47.6598C2642.5 38.2621 2637.58 30.3188 2629.53 23.8299C2621.48 17.341 2611.64 14.0966 2600.01 14.0966H2577.87L2573.51 18.1241Z\" fill=\"black\"/>\n<path d=\"M2740.46 121.834C2740.46 98.564 2746.72 77.531 2759.24 58.7356C2771.99 39.9402 2788.65 25.508 2809.22 15.4391C2830.01 5.14636 2852.37 0 2876.3 0C2900.45 0 2922.81 5.14636 2943.38 15.4391C2964.17 25.7318 2980.83 40.2759 2993.35 59.0713C3005.87 77.8667 3012.14 98.8996 3012.14 122.17C3012.14 157.076 2998.72 186.052 2971.89 209.099C2945.28 232.146 2913.42 243.669 2876.3 243.669C2839.18 243.669 2807.21 232.146 2780.37 209.099C2753.76 185.828 2740.46 156.74 2740.46 121.834ZM2876.3 10.069C2853.71 10.069 2835.27 19.131 2820.96 37.2552C2806.87 55.1556 2799.83 83.3487 2799.83 121.834C2799.83 159.649 2806.87 187.842 2820.96 206.414C2835.04 224.762 2853.49 233.936 2876.3 233.936C2898.88 233.936 2917.22 224.985 2931.3 207.085C2945.61 188.961 2952.77 160.656 2952.77 122.17C2952.77 84.1318 2945.73 55.9387 2931.64 37.5908C2917.55 19.2429 2899.1 10.069 2876.3 10.069Z\" fill=\"black\"/>\n<path d=\"M3037.28 239.306V4.36322H3160.37C3189.88 4.36322 3211.57 13.7609 3225.44 32.5563C3236.84 47.7716 3239.75 64.2176 3234.16 81.8943C3228.57 100.242 3215.6 113.444 3195.25 121.499C3183.4 126.198 3170.1 128.547 3155.34 128.547H3094.63V239.306H3037.28ZM3098.66 14.4322L3097.31 16.1104C3096.2 17.2291 3095.3 18.0123 3094.63 18.4598V118.814H3131.86C3144.16 118.814 3154.44 115.234 3162.72 108.074C3170.99 100.913 3176.02 92.2989 3177.81 82.2299C3179.82 71.9372 3179.82 61.6445 3177.81 51.3517C3176.02 41.059 3170.99 32.3326 3162.72 25.1724C3154.44 18.0123 3144.38 14.4322 3132.53 14.4322H3098.66Z\" fill=\"black\"/>\n<path d=\"M3238.42 239.306H3227.35L3297.78 55.3793L3286.38 28.8644L3328.31 0H3335.68L3441 239.306H3377.61L3356.48 189.632H3256.86L3238.42 239.306ZM3303.15 68.8046L3260.22 179.899H3352.12L3303.15 68.8046Z\" fill=\"black\"/>\n</svg>\n\n  )\n}\n","import React, { useState } from 'react'\nimport s from './style.module.scss'\nimport InputDate, { Value } from 'components/Input/InputDate'\nimport DatePickerBlock from '../DatePickerBlock/DatePickerBlock'\nimport Button from 'components/Button/Button';\nimport { useNavigate } from 'react-router-dom';\nimport sumDigits, { dateConverter } from './helper';\nimport clsx from 'clsx';\nimport Razbor_Sovmestimosty from 'assets/BigSVG/Razbor_Sovmestimosty';\nimport Polniy_Razbor from 'assets/BigSVG/Polniy_Razbor';\nimport Razbor_Dogovora from 'assets/BigSVG/Razbor_Dogovora';\nconst blocks = ['полный разбор', 'разбор совместимости', 'разбор договора']\nexport default function Main() {\n    const navigate = useNavigate()\n    const [personalData, setPersonalData] = useState<Value>(null);\n    const [personalError, setPersonalError] = useState<string | null>(null);\n\n    const [sovmest1, setSovmest1] = useState<Value>(null);\n    const [sovmest2, setSovmest2] = useState<Value>(null);\n    const [dogovor1, setDogovor1] = useState<Value>(null);\n    const [dogovor2, setDogovor2] = useState<Value>(null);\n    const [dogovor3, setDogovor3] = useState<Value>(null);\n    const [value, onChange] = useState<Value>(null);\n\n    const [selectedBlock, setSelectedBlock] = useState<string>(blocks[0]);\n    const handleBlockChange = (title: string) => {\n        setSelectedBlock(title)\n    }\n    const handleSubmitPersonal = () => {\n        if (!personalData) {\n            setPersonalError('Error')\n            return\n        }\n        const milisec = personalData.valueOf()\n        const year = personalData.getFullYear()\n        const month = personalData.getMonth() + 1\n        const day = personalData.getDate()\n        const res = sumDigits(day, month, year)\n        navigate(`/personal?date=${milisec}`)\n    }\n    const handleSubmitSovmestimost = () => {\n        if (!sovmest1 || !sovmest2) {\n            setPersonalError('Error')\n            return\n        }\n        const milisec1 = sovmest1.valueOf()\n        const milisec2 = sovmest2.valueOf()\n\n\n        const date1 = dateConverter(sovmest1)\n        const date2 = dateConverter(sovmest2)\n\n        navigate(`/sovmestimost?date1=${milisec1}&date2=${milisec2}`)\n    }\n    const handleSubmitDogovor = () => {\n        if (!dogovor1 || !dogovor2 || !dogovor3) {\n            setPersonalError('Error')\n            return\n        }\n        const milisec1 = dogovor1.valueOf()\n        const milisec2 = dogovor2.valueOf()\n        const milisec3 = dogovor3.valueOf()\n\n        navigate(`/dogovor?date1=${milisec1}&date2=${milisec2}&date3=${milisec3}`)\n    }\n    return (\n        <>\n            <div className={s.container}>\n                {selectedBlock === 'полный разбор' ?\n                    <div className={clsx(s.batePickerWrapper, s.selectedContainer)}>\n                        <DatePickerBlock title='Полный разбор' >\n                            <div className={s.inputContainer}>\n                                <div className={s.errorInputWrapper}>\n                                    <InputDate className={s.date} label='Дата рождения человека:' value={personalData} onChange={setPersonalData} />\n                                    <div>{personalError}</div>\n                                </div>\n                            </div>\n                            <div className={s.buttonContainer}>\n                                <Button text='Получить Разбор' onClick={handleSubmitPersonal} />\n                            </div>\n                        </DatePickerBlock>\n                        <Polniy_Razbor />\n                    </div>\n                    :\n                    <div className={s.button} onClick={() => handleBlockChange('полный разбор')}>\n                        полный разбор\n                    </div>\n                }\n                {\n                    selectedBlock === 'разбор совместимости' ?\n                        <div onClick={() => handleBlockChange('разбор совместимости')} className={clsx(s.batePickerWrapper, s.selectedContainer)}>\n                            <DatePickerBlock title='разбор совместимости' >\n                                <div className={s.inputContainer}>\n                                    <div className={s.errorInputWrapper}>\n                                        <InputDate className={s.date} label='Дата рождения человека:' value={sovmest1} onChange={setSovmest1} />\n                                        <div>{personalError}</div>\n                                    </div>\n                                    <div className={s.errorInputWrapper}>\n                                        <InputDate className={s.date} label='Дата рождения человека:' value={sovmest2} onChange={setSovmest2} />\n                                        <div>{personalError}</div>\n                                    </div>\n                                </div>\n                                <div className={s.buttonContainer}>\n                                    <Button text='Получить Разбор' onClick={handleSubmitSovmestimost} />\n                                </div>\n                            </DatePickerBlock>\n                            <Razbor_Sovmestimosty />\n\n                        </div>\n                        :\n                        <div className={s.button} onClick={() => handleBlockChange('разбор совместимости')}>\n                            разбор совместимости\n                        </div>\n                }\n                {\n                    selectedBlock === 'разбор договора' ?\n                        <div onClick={() => handleBlockChange('разбор договора')} className={clsx(s.batePickerWrapper, s.selectedContainer)}>\n                            <DatePickerBlock title='разбор договора' >\n                                <div className={s.inputContainer}>\n                                    <div className={s.errorInputWrapper}>\n                                        <InputDate className={s.date} label='Дата рождения человека:' value={dogovor1} onChange={setDogovor1} />\n                                        <div>{personalError}</div>\n                                    </div>\n                                    <div className={s.errorInputWrapper}>\n                                        <InputDate className={s.date} label='Дата рождения человека:' value={dogovor2} onChange={setDogovor2} />\n                                        <div>{personalError}</div>\n                                    </div>\n                                    <div className={s.errorInputWrapper}>\n                                        <InputDate className={s.date} label='Дата рождения человека:' value={dogovor3} onChange={setDogovor3} />\n                                        <div>{personalError}</div>\n                                    </div>\n                                </div>\n                                <div className={s.buttonContainer}>\n                                    <Button text='Получить Разбор' onClick={handleSubmitDogovor} />\n                                </div>\n                            </DatePickerBlock>\n                            <Razbor_Dogovora />\n                        </div>\n                        :\n                        <div className={s.button} onClick={() => handleBlockChange('разбор договора')}>\n                            разбор договора\n                        </div>\n                }\n\n            </div>\n\n        </>\n    )\n}\n// предыдущий код \n{/* <div className={s.container}>\n                <DatePickerBlock title='Полный разбор' >\n                    <div className={s.inputContainer}>\n                        <InputDate className={s.date} label='Дата рождения человека:' value={personalData} onChange={setPersonalData} />\n                        <div>{personalError}</div>\n                    </div>\n                    <Button text='Получить Разбор' onClick={handleSubmitPersonal} />\n                </DatePickerBlock>\n                <div className={s.line}></div>\n                <DatePickerBlock title='Полный разбор' >\n                    <InputDate className={s.date} label='Дата рождения человека:' value={value} onChange={onChange} />\n                    <InputDate className={s.date} label='Дата рождения человека:' value={value} onChange={onChange} />\n                    <Button text='Получить Разбор' />\n                </DatePickerBlock>\n            </div>\n            <div className={s.matchContainer}>\n                <DatePickerBlock title='Полный разбор' >\n                    <InputDate className={s.date} label='Дата рождения человека:' value={value} onChange={onChange} />\n                    <InputDate className={s.date} label='Дата рождения человека:' value={value} onChange={onChange} />\n                    <InputDate className={s.date} label='Дата рождения человека:' value={value} onChange={onChange} />\n                    <Button text='Получить Разбор' />\n                </DatePickerBlock>\n            </div> */}","export default function sumDigits(num1: number, num2: number, num3: number) {\n    const str = num1.toString() + num2.toString() + num3.toString()\n    const arr = str.split('')\n    const res = arr.reduce((sum, digit) => sum + +digit, 0);\n    if (res > 9) {\n        return sumOneDigits(res)\n    }\n    return res\n\n}\nexport function sumOneDigits(n: string | number): number {\n    const str = n.toString()\n    const arr = str.split('')\n    const res = arr.reduce((sum, digit) => sum + +digit, 0);\n    if (res > 9) {\n        return sumOneDigits(res)\n    }\n    return res\n}\n\nfunction sumOfDigits(number: number): number {\n    if (number < 10) {\n        return number\n    }\n    // Преобразуем число в строку, чтобы удобно было работать с каждой цифрой\n    let str = number.toString();\n    let sum = 0;\n\n    // Проходим по каждой цифре строки и добавляем её значение к сумме\n    for (let i = 0; i < str.length; i++) {\n        sum += parseInt(str[i]);\n    }\n\n    return sumOfDigits(+sum);\n};\nexport function dateConverter(dateString: Date) {\n    // Исходная строка даты\n\n    // Преобразуем строку в объект Date\n    const date = new Date(dateString);\n\n    // Извлекаем день, месяц и год\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Месяцы в JavaScript начинаются с 0\n    const year = date.getFullYear();\n\n    // Формируем строку в формате dd.mm.yyyy\n    const formattedDate = `${day}.${month}.${year}`;\n\n    return formattedDate\n}","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"button_error__YkJvg\",\"title\":\"button_title__5gC+I\",\"text\":\"button_text__XVH8C\",\"dataContainer\":\"button_dataContainer__3jkmu\",\"button\":\"button_button__hP9LU\",\"container\":\"button_container__Qvxz+\"};","import React from 'react'\nimport s from './button.module.scss'\nimport { type } from 'os'\ntype ButtonType = 'button' | 'submit'\ninterface Props {\n    text: string,\n    type?: ButtonType,\n    onClick?: () => void\n}\nexport default function Button(props: Props) {\n    const { text, type = 'button' , ...rest} = props\n    return (\n        <div className={s.container}>\n            <button type={type} {...rest} className={s.button}>{text}</button>\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"input_error__OfYDR\",\"title\":\"input_title__xtmVx\",\"text\":\"input_text__aUjj7\",\"dataContainer\":\"input_dataContainer__Ia7H8\",\"input\":\"input_input__VaHsI\",\"icon\":\"input_icon__7BwGD\",\"container\":\"input_container__Hru8f\",\"date\":\"input_date__wBhL9\",\"label\":\"input_label__Wq-Ey\"};"],"names":["InputDate","props","onChange","value","label","className","_jsxs","clsx","s","container","children","_jsx","DatePicker","dayPlaceholder","monthPlaceholder","yearPlaceholder","maxDate","Date","minDate","format","date","clearIcon","calendarIcon","shouldOpenCalendar","DatePickerBlock","_ref","title","Razbor_Sovmestimosty","width","height","viewBox","fill","xmlns","d","Polniy_Razbor","Razbor_Dogovora","blocks","Main","navigate","useNavigate","personalData","setPersonalData","useState","personalError","setPersonalError","sovmest1","setSovmest1","sovmest2","setSovmest2","dogovor1","setDogovor1","dogovor2","setDogovor2","dogovor3","setDogovor3","selectedBlock","setSelectedBlock","handleBlockChange","_Fragment","batePickerWrapper","selectedContainer","inputContainer","errorInputWrapper","buttonContainer","Button","text","onClick","handleSubmitPersonal","milisec","valueOf","year","getFullYear","month","getMonth","day","getDate","sumDigits","concat","button","handleSubmitSovmestimost","milisec1","milisec2","dateConverter","handleSubmitDogovor","milisec3","num1","num2","num3","res","toString","split","reduce","sum","digit","sumOneDigits","n","dateString","String","padStart","type","rest"],"sourceRoot":""}